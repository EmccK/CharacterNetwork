// 从外部书籍创建小说 - 新增版本
app.post("/api/novels/from-search-book", isAuthenticated, async (req, res, next) => {
  try {
    console.log('===== 从搜索结果创建小说 - 开始 =====');
    const bookData = req.body.bookData;
    console.log('收到书籍数据:', {
      externalId: bookData?.externalId,
      title: bookData?.title,
      author: bookData?.author,
      dataType: typeof bookData,
      hasData: Boolean(bookData)
    });
    
    if (!bookData || !bookData.title || !bookData.externalId) {
      console.error('书籍数据不完整，缺少必要字段');
      return res.status(400).json({ 
        message: "无效的书籍数据",
        details: "缺少必要的标题或外部ID"
      });
    }

    // 先保存书籍信息
    console.log('准备保存书籍信息到数据库，外部ID:', bookData.externalId, '标题:', bookData.title);
    
    // 预处理数据
    const insertBookData: InsertBookInfo = {
      externalId: bookData.externalId.toString(),
      title: bookData.title,
      author: bookData.author || '',
      description: bookData.description || '',
      coverImage: bookData.coverImage || '',
      publishedDate: bookData.publishedDate || '',
      publisher: bookData.publisher || '',
      isbn: bookData.isbn || '',
      pageCount: bookData.pageCount || 0,
      categories: Array.isArray(bookData.categories) ? bookData.categories : [],
      language: bookData.language || 'zh'
    };
    
    console.log('处理后的书籍数据:', insertBookData);
    
    // 保存或获取已存在的书籍信息
    console.log('开始查询数据库中是否已存在该书籍信息');
    const existingBook = await storage.getBookInfoByExternalId(insertBookData.externalId);
    let bookInfo;
    
    if (existingBook) {
      console.log('书籍信息已存在，使用现有数据，ID:', existingBook.id, '标题:', existingBook.title);
      bookInfo = existingBook;
    } else {
      console.log('书籍信息不存在，开始创建新的书籍信息');
      try {
        bookInfo = await storage.createBookInfo(insertBookData);
        console.log('新书籍信息创建成功，ID:', bookInfo.id, '标题:', bookInfo.title);
      } catch (dbError) {
        console.error('创建书籍信息时数据库错误:', dbError);
        throw dbError;
      }
    }
    
    // 从书籍信息创建小说
    console.log('开始创建小说，使用书籍ID:', bookInfo.id);
    const novelData = {
      title: bookInfo.title,
      description: bookInfo.description || '',
      coverImage: bookInfo.coverImage || '',
      genre: Array.isArray(bookInfo.categories) && bookInfo.categories.length > 0 ? 
             bookInfo.categories[0] : '',
      status: req.body.status || 'In Progress',
      userId: req.user!.id,
      bookInfoId: bookInfo.id  // 使用内部数据库 ID
    };
    
    console.log('准备创建小说，数据:', {
      bookId: bookInfo.id,
      title: novelData.title,
      userId: novelData.userId
    });
    
    const validationResult = insertNovelSchema.safeParse(novelData);
    if (!validationResult.success) {
      console.error('小说数据验证失败:', validationResult.error.format());
      return res.status(400).json({ message: "Invalid novel data", errors: validationResult.error.format() });
    }
    
    try {
      const novel = await storage.createNovel(validationResult.data);
      console.log('小说创建成功，ID:', novel.id, '标题:', novel.title, '用户ID:', novel.userId);
      console.log('===== 从搜索结果创建小说 - 完成 =====');
      res.status(201).json(novel);
    } catch (novelError) {
      console.error('创建小说时数据库错误:', novelError);
      throw novelError;
    }
  } catch (error) {
    console.error('从书籍创建小说失败，错误详情:', error);
    next(error);
  }
});