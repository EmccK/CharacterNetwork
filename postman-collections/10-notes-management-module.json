{
  "module_info": {
    "name": "笔记管理模块",
    "description": "小说笔记的完整管理，支持标签分类和搜索功能",
    "route_prefix": "/api/novels/:novelId/notes, /api/notes",
    "dependencies": ["认证管理模块", "小说管理模块", "角色管理模块"]
  },
  "folder": {
    "name": "笔记管理模块",
    "description": "### 笔记管理模块\n\n#### 业务逻辑\n- 笔记的完整CRUD操作\n- 支持富文本内容编辑\n- 笔记标签系统和分类管理\n- 笔记与角色的关联功能\n- 笔记搜索和筛选功能\n- 笔记的创建和更新时间追踪\n\n#### 业务约束\n- 笔记必须属于特定小说\n- 用户只能管理自己小说中的笔记\n- 笔记标题为必填字段\n- 标签支持多个，用于分类和搜索\n- 关联的角色必须属于同一小说\n\n#### 权限控制\n- 需要登录才能访问所有接口\n- 用户只能操作自己小说中的笔记\n- 管理员可以查看和管理所有笔记",
    "item": [
      {
        "name": "获取小说的所有笔记",
        "request": {
          "method": "GET",
          "header": [],
          "url": {
            "raw": "{{base_url}}/api/novels/{{novel_id}}/notes",
            "variable": [
              {
                "key": "novel_id",
                "value": "1",
                "description": "小说ID"
              }
            ]
          },
          "description": "#### 获取小说的所有笔记\n\n**功能说明**: 获取指定小说中的所有笔记，按更新时间倒序排列\n\n**权限要求**: \n- 角色：已登录用户\n- 权限：需要有效会话，只能访问自己小说的笔记\n\n**限流规则**: \n- QPS限制：100次/秒\n- 无特殊限制\n\n**错误码对照表**:\n\n| 错误码 | HTTP状态码 | 错误信息 | 解决方案 |\n|--------|------------|----------|----------|\n| 401 | 401 | 未登录 | 用户需要先登录 |\n| 400 | 400 | 无效的小说ID | 检查小说ID格式 |\n| 404 | 404 | 小说不存在 | 检查小说ID是否正确 |\n| 403 | 403 | 权限不足 | 只能访问自己的小说 |\n| 500 | 500 | 服务器内部错误 | 联系技术支持 |\n\n**业务规则**:\n- 只返回指定小说中的笔记\n- 按更新时间倒序排列\n- 包含笔记的完整信息和标签\n- 用户只能查看自己小说的笔记"
        },
        "response": [
          {
            "name": "获取成功",
            "originalRequest": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{base_url}}/api/novels/1/notes"
              }
            },
            "status": "OK",
            "code": 200,
            "_postman_previewlanguage": "json",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "cookie": [],
            "body": "[\n  {\n    \"id\": 1,\n    \"title\": \"角色设定笔记\",\n    \"content\": \"## 萧炎角色设定\\n\\n### 基本信息\\n- 年龄：18岁\\n- 修为：斗者\\n- 性格：坚韧不拔，重情重义\\n\\n### 成长轨迹\\n从废物少年到斗帝的成长历程，经历了无数磨难和挑战。\",\n    \"novelId\": 1,\n    \"characterIds\": [1, 2],\n    \"labels\": [\"角色设定\", \"主角\", \"成长\"],\n    \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n    \"updatedAt\": \"2024-01-15T14:20:00.000Z\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"世界观设定\",\n    \"content\": \"## 斗气大陆世界观\\n\\n### 修炼体系\\n- 斗之气：基础能量\\n- 斗技：战斗技能\\n- 功法：修炼方法\\n\\n### 等级划分\\n斗者 → 斗师 → 大斗师 → 斗灵 → 斗王 → 斗皇 → 斗宗 → 斗尊 → 斗圣 → 斗帝\",\n    \"novelId\": 1,\n    \"characterIds\": null,\n    \"labels\": [\"世界观\", \"设定\", \"修炼体系\"],\n    \"createdAt\": \"2024-01-15T11:00:00.000Z\",\n    \"updatedAt\": \"2024-01-15T13:45:00.000Z\"\n  },\n  {\n    \"id\": 3,\n    \"title\": \"情节灵感\",\n    \"content\": \"### 第三卷情节构思\\n\\n1. 萧炎进入迦南学院\\n2. 遇到导师若琳\\n3. 参加选拔赛\\n4. 发现天焚炼气塔的秘密\\n\\n**重点情节**：\\n- 与萧玉重逢\\n- 药老身份暴露的危机\\n- 内院试炼的挑战\",\n    \"novelId\": 1,\n    \"characterIds\": [1],\n    \"labels\": [\"情节\", \"灵感\", \"第三卷\"],\n    \"createdAt\": \"2024-01-15T12:30:00.000Z\",\n    \"updatedAt\": \"2024-01-15T12:30:00.000Z\"\n  }\n]",
            "description": "### 获取笔记列表成功响应\n\n**响应字段**:\n\n| 字段名 | 类型 | 描述 |\n|--------|------|------|\n| id | number | 笔记唯一标识 |\n| title | string | 笔记标题 |\n| content | string | 笔记内容(支持Markdown) |\n| novelId | number | 所属小说ID |\n| characterIds | array/null | 关联角色ID数组 |\n| labels | array | 笔记标签数组 |\n| createdAt | string | 创建时间(ISO格式) |\n| updatedAt | string | 更新时间(ISO格式) |\n\n**内容格式**:\n- 支持Markdown语法\n- 可包含标题、列表、代码块等\n- 适合记录复杂的设定和构思"
          },
          {
            "name": "小说不存在",
            "originalRequest": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{base_url}}/api/novels/999/notes"
              }
            },
            "status": "Not Found",
            "code": 404,
            "_postman_previewlanguage": "json",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "cookie": [],
            "body": "{\n  \"error\": \"未找到指定的小说\"\n}",
            "description": "### 小说不存在错误响应\n\n**触发条件**:\n- 提供的小说ID不存在\n- 小说已被删除\n- 用户无权访问该小说\n\n**处理建议**:\n- 检查小说ID是否正确\n- 确认用户权限\n- 刷新小说列表"
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "exec": [
                "// 检查登录状态",
                "if (pm.environment.get('is_logged_in') !== 'true') {",
                "    console.log('警告：用户未登录，此请求可能失败');",
                "}",
                "",
                "// 检查是否有小说ID",
                "if (!pm.environment.get('novel_id')) {",
                "    console.log('警告：未设置novel_id环境变量');",
                "}"
              ],
              "type": "text/javascript"
            }
          },
          {
            "listen": "test",
            "script": {
              "exec": [
                "// 基础响应验证",
                "pm.test('HTTP状态码验证', function () {",
                "    pm.expect([200, 400, 404, 403, 401]).to.include(pm.response.code);",
                "});",
                "",
                "// 响应时间验证",
                "pm.test('响应时间验证', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});",
                "",
                "// 成功获取时的验证",
                "if (pm.response.code === 200) {",
                "    pm.test('笔记列表响应格式验证', function () {",
                "        const jsonData = pm.response.json();",
                "        pm.expect(jsonData).to.be.an('array');",
                "    });",
                "    ",
                "    // 笔记数据结构验证",
                "    const responseJson = pm.response.json();",
                "    if (responseJson.length > 0) {",
                "        pm.test('笔记数据结构验证', function () {",
                "            const note = responseJson[0];",
                "            pm.expect(note).to.have.property('id');",
                "            pm.expect(note).to.have.property('title');",
                "            pm.expect(note).to.have.property('content');",
                "            pm.expect(note).to.have.property('novelId');",
                "            pm.expect(note).to.have.property('labels');",
                "            pm.expect(note.novelId).to.equal(parseInt(pm.environment.get('novel_id')));",
                "        });",
                "        ",
                "        // 验证标签数组",
                "        pm.test('标签数组验证', function () {",
                "            responseJson.forEach(note => {",
                "                pm.expect(note.labels).to.be.an('array');",
                "            });",
                "        });",
                "        ",
                "        // 保存第一个笔记ID用于后续测试",
                "        pm.environment.set('note_id', responseJson[0].id);",
                "    }",
                "}",
                "",
                "/* 业务逻辑验证：",
                "   - 验证笔记属于指定小说",
                "   - 检查笔记数据的完整性",
                "   - 确认标签系统的正确性",
                "*/"
              ],
              "type": "text/javascript"
            }
          }
        ]
      },
      {
        "name": "创建笔记",
        "request": {
          "method": "POST",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "description": "请求内容类型"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"新的创作笔记\",\n  \"content\": \"## 创作灵感\\n\\n今天突然想到一个很有趣的情节设定：\\n\\n### 核心想法\\n- 主角获得神秘力量\\n- 力量来源于古老的传说\\n- 需要付出相应的代价\\n\\n### 具体情节\\n1. 发现古老遗迹\\n2. 触发神秘机关\\n3. 获得力量但失去记忆\\n4. 逐步恢复并掌控力量\\n\\n**注意事项**：\\n- 力量设定要合理\\n- 代价不能太大也不能太小\\n- 要为后续情节留下伏笔\",\n  \"characterIds\": [{{character_id}}],\n  \"labels\": [\"创作灵感\", \"情节设定\", \"力量体系\"]\n}",
            "options": {
              "raw": {
                "language": "json",
                "description": "### 请求参数说明\n\n| 字段名 | 类型 | 必填 | 描述 | 示例值 |\n|--------|------|------|------|--------|\n| title | string | 是 | 笔记标题 | \"新的创作笔记\" |\n| content | string | 否 | 笔记内容(支持Markdown) | \"## 标题\\n内容\" |\n| characterIds | array | 否 | 关联角色ID数组 | [1, 2] |\n| labels | array | 否 | 笔记标签数组 | [\"灵感\", \"设定\"] |"
              }
            }
          },
          "url": {
            "raw": "{{base_url}}/api/novels/{{novel_id}}/notes"
          },
          "description": "#### 创建笔记\n\n**功能说明**: 在指定小说中创建新的笔记\n\n**权限要求**: \n- 角色：已登录用户\n- 权限：需要有效会话，只能在自己的小说中创建笔记\n\n**限流规则**: \n- QPS限制：50次/秒\n- 同用户限制：2000个笔记/小说\n\n**错误码对照表**:\n\n| 错误码 | HTTP状态码 | 错误信息 | 解决方案 |\n|--------|------------|----------|----------|\n| 401 | 401 | 未登录 | 用户需要先登录 |\n| 400 | 400 | 笔记标题不能为空 | 提供笔记标题 |\n| 400 | 400 | 无效的小说ID | 检查小说ID格式 |\n| 403 | 403 | 权限不足 | 只能在自己的小说中创建笔记 |\n| 500 | 500 | 服务器内部错误 | 联系技术支持 |\n\n**业务规则**:\n- 标题为必填字段\n- 内容支持Markdown格式\n- 标签用于分类和搜索\n- 关联的角色必须属于同一小说\n- 自动设置创建和更新时间"
        },
        "response": [
          {
            "name": "创建成功",
            "originalRequest": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"title\": \"新的创作笔记\",\n  \"content\": \"## 创作灵感\\n\\n今天突然想到一个很有趣的情节设定\",\n  \"characterIds\": [1],\n  \"labels\": [\"创作灵感\", \"情节设定\"]\n}"
              },
              "url": {
                "raw": "{{base_url}}/api/novels/1/notes"
              }
            },
            "status": "Created",
            "code": 201,
            "_postman_previewlanguage": "json",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "cookie": [],
            "body": "{\n  \"id\": 10,\n  \"title\": \"新的创作笔记\",\n  \"content\": \"## 创作灵感\\n\\n今天突然想到一个很有趣的情节设定：\\n\\n### 核心想法\\n- 主角获得神秘力量\\n- 力量来源于古老的传说\\n- 需要付出相应的代价\\n\\n### 具体情节\\n1. 发现古老遗迹\\n2. 触发神秘机关\\n3. 获得力量但失去记忆\\n4. 逐步恢复并掌控力量\\n\\n**注意事项**：\\n- 力量设定要合理\\n- 代价不能太大也不能太小\\n- 要为后续情节留下伏笔\",\n  \"novelId\": 1,\n  \"characterIds\": [1],\n  \"labels\": [\"创作灵感\", \"情节设定\", \"力量体系\"],\n  \"createdAt\": \"2024-01-15T19:30:00.000Z\",\n  \"updatedAt\": \"2024-01-15T19:30:00.000Z\"\n}",
            "description": "### 创建笔记成功响应\n\n**响应字段**: 包含完整的笔记信息\n\n**Markdown支持**:\n- 标题：# ## ###\n- 列表：- 1. 2.\n- 强调：**粗体** *斜体*\n- 代码：`代码` ```代码块```\n- 链接：[文本](URL)\n- 表格：| 列1 | 列2 |"
          },
          {
            "name": "标题为空错误",
            "originalRequest": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"content\": \"没有标题的笔记内容\",\n  \"labels\": [\"测试\"]\n}"
              },
              "url": {
                "raw": "{{base_url}}/api/novels/1/notes"
              }
            },
            "status": "Bad Request",
            "code": 400,
            "_postman_previewlanguage": "json",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "cookie": [],
            "body": "{\n  \"error\": \"笔记标题不能为空\"\n}",
            "description": "### 标题为空错误响应\n\n**触发条件**:\n- 未提供笔记标题\n- 标题为空字符串\n- 标题只包含空格\n\n**处理建议**:\n- 检查标题字段\n- 验证标题内容的有效性\n- 提供标题输入提示"
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "exec": [
                "// 检查登录状态",
                "if (pm.environment.get('is_logged_in') !== 'true') {",
                "    console.log('错误：用户未登录，此请求将失败');",
                "    return;",
                "}",
                "",
                "// 检查小说ID",
                "if (!pm.environment.get('novel_id')) {",
                "    console.log('错误：未设置novel_id环境变量');",
                "    return;",
                "}",
                "",
                "// 生成随机笔记标题用于测试",
                "const timestamp = new Date().getTime();",
                "const randomTitle = `测试笔记_${timestamp}`;",
                "pm.environment.set('random_note_title', randomTitle);"
              ],
              "type": "text/javascript"
            }
          },
          {
            "listen": "test",
            "script": {
              "exec": [
                "// 基础响应验证",
                "pm.test('HTTP状态码验证', function () {",
                "    pm.expect([201, 400, 401, 403]).to.include(pm.response.code);",
                "});",
                "",
                "// 响应时间验证",
                "pm.test('响应时间验证', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                "});",
                "",
                "// 创建成功时的验证",
                "if (pm.response.code === 201) {",
                "    pm.test('创建成功响应格式验证', function () {",
                "        const jsonData = pm.response.json();",
                "        pm.expect(jsonData).to.have.property('id');",
                "        pm.expect(jsonData).to.have.property('title');",
                "        pm.expect(jsonData).to.have.property('novelId');",
                "        pm.expect(jsonData).to.have.property('labels');",
                "        pm.expect(jsonData).to.have.property('createdAt');",
                "        pm.expect(jsonData).to.have.property('updatedAt');",
                "        pm.expect(jsonData.novelId).to.equal(parseInt(pm.environment.get('novel_id')));",
                "    });",
                "    ",
                "    // 验证标签数组",
                "    pm.test('标签数组验证', function () {",
                "        const jsonData = pm.response.json();",
                "        pm.expect(jsonData.labels).to.be.an('array');",
                "    });",
                "    ",
                "    // 验证时间戳",
                "    pm.test('时间戳验证', function () {",
                "        const jsonData = pm.response.json();",
                "        pm.expect(jsonData.createdAt).to.equal(jsonData.updatedAt);",
                "    });",
                "    ",
                "    // 保存新创建的笔记ID",
                "    const responseJson = pm.response.json();",
                "    pm.environment.set('new_note_id', responseJson.id);",
                "}",
                "",
                "// 验证错误响应格式",
                "if (pm.response.code === 400) {",
                "    pm.test('验证错误响应格式', function () {",
                "        const jsonData = pm.response.json();",
                "        pm.expect(jsonData).to.have.property('error');",
                "    });",
                "}",
                "",
                "/* 业务逻辑验证：",
                "   - 验证笔记与小说的关联",
                "   - 检查Markdown内容的处理",
                "   - 确认标签系统的有效性",
                "*/"
              ],
              "type": "text/javascript"
            }
          }
        ]
      }
    ]
  }
}
